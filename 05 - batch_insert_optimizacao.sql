
----ESTE SCRIPT DEMONSTRA COMO REALIZAR INSERÇÕES EM LOTES UTILIZANDO
---TRANSAÇÕES, OU SEJA, INSERIR GRANDES VOLUMES DE DADOS DE FORMA EFICIENTE
---DIVIDINDO AS INSERÇÕES EM PEQUENOS LOTES (BATCHES OU CHUNKS)
---AJUDA A EVITAR QUEBRAS E MELHORA O DESEMPENHO DO BANCO


---00 SELECIONA O BANCO DE DADOS QUE VAMOS USAR
USE db1609_empresa_muito_legal
GO

---01 CRIAR A TABELA
CREATE TABLE vendas(
	venda_id INT IDENTITY (1,1) PRIMARY KEY,
	cliente_id INT,
	produto_id INT,
	quantidade INT,
	valor_total DECIMAL (10,2),
	data_venda DATETIME
);

---02 VARIÁVEIS PARA CONTROLE DOS LOTES
DECLARE @batch_size INT = 1000; ---tamanho do lote
DECLARE @total_registros INT = 10000; ---total de registro que desejamos incluir
DECLARE @contador INT = 0;---contador de inserções realizadas

BEGIN TRY ---INICIAR A TRANSAÇÃO PARA GARANTIR QUE INSERÇÕES DE CADA LOTE SEJAM ATOMICAS (ÚNICAS)
	WHILE @contador < @total_registros
		BEGIN
			---INICIANDO A TRANSAÇÃO
			BEGIN TRANSACTION 
			
			---INSERINDO UM LOTE DE REGISTROS NA TABELA DE VENDAS
			INSERT INTO vendas (cliente_id,produto_id,quantidade,valor_total,data_venda)
			SELECT
			---GERANDO UM CLIENTE_ID ALEATÓRIO ENTRE 1 E 1000
				ABS(CHECKSUM(NEWID())) % 1000 + 1,
			---GERANDO UM PRODUTO_ID ALEATÓRIO ENTRE 1 E 1000
				ABS(CHECKSUM(NEWID())) % 1000 + 1,
			---GERANDO UMA QUANTIDADE ALEATÓRIA ENTRE 1 E 1000
				ABS(CHECKSUM(NEWID())) % 10 + 1,
			---GERANDO UM VALOR_TOTAL ALEATÓRIO ENTRE 1 E 1000
				(ABS(CHECKSUM(NEWID())) % 1000 + 1) *10,
			---DATA DA VENDA SERÁ DATA E HORA ATUAL
				GETDATE()
			FROM master.dbo.spt_values t1
			CROSS JOIN master.dbo.spt_values t2 ---spt é split ou quebra
			WHERE t1.type = 'P' AND t2.type = 'P'
			ORDER BY NEWID()
			---INSERÇÃO DE APENAS UM LOTE 
			OFFSET @contador ROWS FETCH NEXT @batch_size ROWS ONLY;

			---ATUALIZAR O CONTADOR
			SET @contador = @contador + @batch_size;
			---cCONFIRMANDO A TRANSAÇÃO E COMITANDO
			COMMIT TRANSACTION
			---EXIBINDO UMA MENSAGEM DE PROGRESSO
			PRINT 'Lote: ' + CAST(@contador / @batch_size AS VARCHAR) + 'inseridos com sucesso'
		END
END TRY
BEGIN CATCH  ---SEMPRE E LOGO APÓS O END TRY
---CASO OCORRA ALGUM ERRO REALIZAMOS UM ROLLBACK DA TRANSAÇÃO
	IF @@TRANCOUNT > 0
	BEGIN
		ROLLBACK TRANSACTION
	END
	PRINT 'Erro: '+ ERROR_MESSAGE();
END CATCH
---VER O QUE TEM DENTRO DA TABELA
SELECT COUNT(*) AS Total_Vendas FROM vendas;